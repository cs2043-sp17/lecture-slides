% Cornell CS 2043: Unix Tools and Scripting
% Spring 2016
%
% http://cs2043-sp16.github.io/
%
% These slides have been created using the metroplis theme demo found here:
%
%     https://github.com/matze/mtheme.git
%
% I am a huge fan of the metropolis theme...thanks @matze!
\input{../common-header.input}

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%
% \begin
%
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
\title{03 \-- Manipulating Files and Using Git}
\subtitle{CS 2043: Unix Tools and Scripting, Spring 2017 \cite{prevSemesters}}
\date{January 30th, 2017}
\author{Stephen McDowell}
\institute{Cornell University}

\begin{document}
\maketitle

% TOC
\begin{frame}{Table of contents}
  \setbeamertemplate{section in toc}[sections numbered]
  \tableofcontents[hideallsubsections]
\end{frame}

\begin{frame}{Some Logistics}
  \begin{leftemize}[<+- | alert@+>]
    \item Last day to add is Wednesday 2/1.
    \item On moving forward independently, and using \texttt{sudo}.
    \begin{leftemize}
      \item I strongly advise taking a \emph{snapshot} of your VM.
    \end{leftemize}
  \end{leftemize}
\end{frame}

%
%%
%%%
%%%%
%%%%% section working_with_files
%%%%%
%%%%%
%%%%%
%%%%%
\section{Working with Files}
\label{sec:working_with_files}

\begin{frame}[fragile]{Users and Groups}
  \begin{leftemize}[<+- | alert@+>]
    \item[] Like most OS's, Unix allows multiple people to use the same machine at once.
            The question: who has access to what?
    \item Access to files depends on the users' account.
    \item All accounts are presided over by the \colbf{S}uper\colbf{u}ser, or \texttt{root} account.
    \item Each user has absolute control over any files they own, which can only be superseded by \texttt{root}.
    \item Files can also be owned by a \texttt{group}, allowing more users to have access.
  \end{leftemize}
\end{frame}

\begin{frame}[fragile]{File Ownership}
  \begin{leftemize}[<+- | alert@+>]
    \item You can discern who owns a file many ways, the most immediate being \texttt{ls -l}

    \begin{block}{Permissions with \texttt{ls}}
      {\small
      \texttt{\$ ls -l Makefile}\\
      \texttt{-rw-rw-r--. 1 sven users 4.9K Jan 31 04:42 Makefile}\\
      \texttt{\hphantom{-rw-rw-r--. 1 }\colbf{sven}\hphantom{ users }\# the user}\\
      \texttt{\hphantom{-rw-rw-r--. 1 sven }\colbf{users }\# the group}\\
      }
    \end{block}
    \item The third column is the \emph{user}, and the fourth column is the \emph{group}.
  \end{leftemize}
\end{frame}

\begin{frame}[fragile]{What is this RWX Nonsense?}
  \begin{leftemize}[<+- | alert@+>]
    \item R = read, W = write, X = execute.
    \item \alert<3>{rwx}\alert<4>{rwx}\alert<5>{rwx}
    \begin{leftemize}
      \item User permissions.
      \item Group permissions.
      \item Other permissions (a.k.a. neither the owner, nor a member of the group).
    \end{leftemize}
    \item Directory permissions begin with a \texttt{d} instead of a \texttt{-}.
  \end{leftemize}
\end{frame}

\begin{frame}[fragile]{An example}
  \begin{leftemize}[<+- | alert@+>]
    \item[] What would the permissions \texttt{-rwxr-----} mean?\wl
    \begin{leftemize}
      \item It is a file.
      \item User can read and write to the file, as well as execute it.
      \item Group members are allowed to read the file, but cannot write to or execute.
      \item Other cannot do \emph{anything} with it.
    \end{leftemize}
  \end{leftemize}
\end{frame}

\begin{frame}[fragile]{Changing Permissions}
  \begin{block}{\colbf{Ch}ange \colbf{Mod}e}
    \texttt{chmod <mode> <file>}
    \begin{enumerate}[\--]
      \item Changes file / directory permissions to \texttt{<mode>}.
      \item The format of \texttt{<mode>} is a combination of three fields:
      \begin{enumerate}[\--]
        \item Who is affected: a combination of \texttt{u}, \texttt{g}, \texttt{o}, or \texttt{a} (all).
        \item Use a \texttt{+} to add permissions, and a \texttt{-} to remove.
        \item Specify type of permission: any combination of \texttt{r}, \texttt{w}, \texttt{x}.
      \end{enumerate}
      \item Or you can specify mode in octal: user, then group, then other.
      \begin{enumerate}[\--]
        \item e.g. \texttt{777} means user=7, group=7, other=7 permissions.
      \end{enumerate}
    \end{enumerate}
  \end{block}
  The octal version can be confusing, but will save you time.  Excellent resource in \cite{chmod}.
\end{frame}

\begin{frame}[fragile]{Changing Ownership}
  Changing the group
  \begin{block}{\colbf{Ch}ange \colbf{Gr}ou\colbf{p}}
    \texttt{chgrp group <file>}
    \begin{enumerate}[\--]
      \item Changes the group ownership of \texttt{<file>} to \texttt{group}.
    \end{enumerate}
  \end{block}

  As the super user, you can change who owns a file:

  \begin{block}{\colbf{Ch}ange \colbf{Own}ership}
    \texttt{chown user:group <file>}
    \begin{enumerate}[\--]
      \item Changes the ownership of \texttt{<file>}.
      \item The \texttt{group} is optional.
      \item The \texttt{-R} flag is useful for recursively modifying everything in a directory.
    \end{enumerate}
  \end{block}
\end{frame}

\begin{frame}[fragile]{File Ownership, Alternate}
  If you are like me, you often forget which column is which in \texttt{ls -l}...

  \begin{block}{\colbf{Stat}us of a file or filesystem}
    \texttt{stat [opts] <filename>}
    \begin{enumerate}[\--]
      \item Gives you a wealth of information, generally more than you will every actually need.
      \item \texttt{Uid} is the user, \texttt{Gid} is the group.
      \begin{enumerate}[\--]
        \item BSD/OSX: use \texttt{stat -x} for standard display of this command.
      \end{enumerate}
      \item Can be useful if you want to mimic file permissions you don't know.
      \begin{enumerate}[\--]
        \item Human readable: \texttt{--format=\%A}, e.g. \texttt{-rw-rw-r--}
        \begin{enumerate}[\--]
          \item BSD/OSX: \texttt{-f \%Sp} is used instead.
        \end{enumerate}
        \item Octal: \texttt{--format=\%a} (great for \texttt{chmod}), e.g. \texttt{664}
        \begin{enumerate}[\--]
          \item BSD/OSX: \texttt{-f \%A} is used instead.
        \end{enumerate}
      \end{enumerate}
    \end{enumerate}
  \end{block}
\end{frame}

\begin{frame}[fragile]{Platform Notes}
  \begin{leftemize}[<+- | alert@+>]
    \item Convenience flag for \texttt{chown} and \texttt{chmod} on non-BSD Unix:

    \begin{minted}[bgcolor=bg, gobble=6]{bash}
      $ chmod --reference=<src> <dest>
    \end{minted}

    \item Set the permissions of \texttt{dest} to the permissions of \texttt{src}!
    \item BSD/OSX users: \texttt{--reference} does not exist, you will have to execute two commands.

    \begin{minted}[bgcolor=bg, gobble=6]{bash}
      $ chmod $(stat -f %A <src>) <dest>
    \end{minted}

    \item The command inside of \texttt{\$(...)} gets evaluated \emph{before} \texttt{chmod}.\\[-1ex]
    \begin{leftemize}
      \item You may see backticks: \texttt{`stat -f \%A <src>`}, this is the \textbf{old} way, and
            is no longer supported.
    \end{leftemize}
    \item The \texttt{stat} command performs a little differently on BSD/OSX by default.  Read the \texttt{man} page.
  \end{leftemize}
\end{frame}
%%%%%
%%%%%
%%%%%
%%%%%
%%%%% section working_with_files
%%%%
%%%
%%
%

%
%%
%%%
%%%%
%%%%% section types_of_files
%%%%%
%%%%%
%%%%%
%%%%%
\section{Types of Files and Usages}
\label{sec:types_of_files}

\begin{frame}[fragile]{Plain Files}
  \begin{leftemize}[<+- | alert@+>]
    \item[] Plain text files are human-readable, and are usually used for things like:
    \begin{leftemize}
      \item Documentation,
      \item Application settings,
      \item Source code,
      \item Logs, and
      \item Anything you may want to read via the terminal (e.g. README.txt).
    \end{leftemize}
  \end{leftemize}
\end{frame}

\begin{frame}[fragile]{Binary Files}
  \begin{leftemize}[<+- | alert@+>]
    \item[] Binary files are not human-readable.  They are written in the language your computer prefers.
    \begin{leftemize}
      \item Executables,
      \item Libraries,
      \item Media files,
      \item Archives (.zip, etc), and many more.
    \end{leftemize}
  \end{leftemize}
\end{frame}

\begin{frame}[fragile]{Reading Files Without Opening}
  \vspace*{-0.5ex}
  \begin{block}{Con\colbf{cat}enate}
    \texttt{cat <filename>}
    \begin{enumerate}[\--]
      \item Prints the contents of the file to the terminal window
    \end{enumerate}
    \texttt{cat <file1> <file2>}
    \begin{enumerate}[\--]
      \item Prints \texttt{file1} first, then \texttt{file2}.
    \end{enumerate}
  \end{block}
  \vspace*{-1ex}
  \begin{block}{\colbf{more}}
    \texttt{more <filename>}
    \begin{enumerate}[\--]
      \item Scroll through one page at a time.
      \item Program exits when end is reached.
    \end{enumerate}
  \end{block}
  \vspace*{-1ex}
  \begin{block}{\colbf{less}}
    \texttt{less <filename>}
    \begin{enumerate}[\--]
      \item Scroll pages or lines (mouse wheel, space bar, and arrows).
      \item Program does not exit when end is reached.
    \end{enumerate}
  \end{block}
\end{frame}

\begin{frame}[fragile]{Beginning and End}
  \begin{leftemize}[<+- | alert@+>]
    \item[] Long files can be a pain with the previous tools.

    \begin{block}{\colbf{Head} and \colbf{Tail} of Input}
      \texttt{head -[numlines] <filename>}\\
      \texttt{tail -[numlines] <filename>}
      \begin{enumerate}[\--]
        \item Prints the first / last numlines of the file.
        \item Default is 10 lines.
      \end{enumerate}
    \end{block}
  \end{leftemize}
\end{frame}

\begin{frame}[fragile]{Not Really a File...YET}
  \begin{leftemize}[<+- | alert@+>]
    \item[] You can talk to yourself in the terminal too!

    \begin{block}{\colbf{Echo}}
      \texttt{echo <text>}
      \begin{enumerate}[\--]
        \item Prints the input string to the standard output (the terminal).
        \item We will soon learn how to use \texttt{echo} to put things into files, append to files, etc.
      \end{enumerate}
    \end{block}
  \end{leftemize}
\end{frame}
%%%%%
%%%%%
%%%%%
%%%%%
%%%%% section types_of_files
%%%%
%%%
%%
%

%
%%
%%%
%%%%
%%%%% section let_s_git_started
%%%%%
%%%%%
%%%%%
%%%%%
\section{Let's Git Started}
\label{sec:let_s_git_started}

\begin{frame}[fragile]{What is \texttt{git}?}
  \begin{leftemize}[<+- | alert@+>]
    \item \texttt{git} is a \emph{decentralized} version control system.
    \item Ever used "track changes" for a word document?  It's basically the same thing.
    \item Except for exceptionally more advanced, and you don't have to pay for it.
    \item Basically, it enables you to save changes as you go to your code.
    \begin{leftemize}
      \item As you make these changes, if at any point in time you discover your code is
            "broken", you can \emph{revert} back in time!
      \item Of course, if you haven't been "saving" frequently, you have less to work with.
      \item Mantra: \emph{commit} early and often.
    \end{leftemize}
  \end{leftemize}
\end{frame}

\begin{frame}[fragile]{\texttt{git} Terminology}
  \begin{leftemize}[<+- | alert@+>]
    \item The "document" is called a \emph{repository} (\emph{repo}).
    \begin{leftemize}
      \item The initial download is called \emph{clone}.
    \end{leftemize}
    \item The location where files are being stored on the server is the \emph{remote}.
    \item We'll refer to the copies on your computer as the \emph{local}, or sometimes \emph{client}.
    \item The act of "saving" is \emph{commit}.
    \begin{leftemize}
      \item Just because you saved it \emph{locally} doesn't mean anything for the \emph{remote}.
      \item To publish changes to the \emph{remote}, you \emph{push}.
    \end{leftemize}
    \item When the version you have is different than what is online, this can produce
          a \emph{conflict} \-- if \texttt{git} cannot figure out what to do, it will tell you.
    \item To acquire updates from the \emph{remote}, you need to \emph{pull}.
  \end{leftemize}
\end{frame}

\begin{frame}[fragile]{On the Board}
  What does it actually look like?
\end{frame}

\begin{frame}[fragile]{Teaser: Example Scenario}
  \begin{leftemize}[<+- | alert@+>]
    \item Suppose you (\texttt{A}), and your best friend \texttt{B} are working in the same repo.
    \item You both \texttt{clone} the repository at the same time, and both make different changes
          to the same file.
    \item \texttt{B} hacks your internet and takes you offline, and \texttt{push}es their changes to the \texttt{remote}.
    \item You get internet back, and go to \texttt{push}.  What happens?
    \begin{leftemize}[<+- | alert@+>]
      \item The \texttt{remote} will reject your \texttt{push}, and force you to merge in the changes from \texttt{B} first.
    \end{leftemize}
    \item Basically, \texttt{git} can get complicated quickly.
    \item HOWEVER!  You \textbf{must} work independently in this class, so you won't have nearly as many problems ;)
  \end{leftemize}
\end{frame}

%%%%%
%%%%%
%%%%%
%%%%%
%%%%% section let_s_git_started
%%%%
%%%
%%
%

%
%%
%%%
%%%%
%%%%% section demo_time_
%%%%%
%%%%%
%%%%%
%%%%%
\section{Demo Time!}
\label{sec:demo_time_}
\begin{frame}[fragile]{Our first in class demo}
  \begin{leftemize}[<+- | alert@+>]
    \item Ok, lets not get too carried away with \texttt{git}.
    \item The first thing you'll want to do is learn how to download a \texttt{repo}.
    \begin{minted}[bgcolor=bg, gobble=6, fontsize=\footnotesize]{bash}
      $ git clone https://github.com/cs2043-sp17/lecture-demos.git
    \end{minted}
    \item ... lets walk through the demo ...
    \item Hey a solution!  To get it now:
    \begin{minted}[bgcolor=bg, gobble=6]{bash}
      $ git pull
    \end{minted}
  \end{leftemize}
\end{frame}
%%%%%
%%%%%
%%%%%
%%%%%
%%%%% section demo_time_
%%%%
%%%
%%
%

\begin{frame}[allowframebreaks]{References}
  \bibliography{references}
  \bibliographystyle{abbrv}
\end{frame}

\end{document}
