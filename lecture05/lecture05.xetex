% Cornell CS 2043: Unix Tools and Scripting
% Spring 2017
%
% http://cs2043-sp17.github.io/
%
% These slides have been created using the metroplis theme demo found here:
%
%     https://github.com/matze/mtheme.git
%
% I am a huge fan of the metropolis theme...thanks @matze!
\input{../common-header.input}

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%
% \begin
%
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
\title{05 \-- More Files, Chaining Commands, Piping and Redirection}
\subtitle{CS 2043: Unix Tools and Scripting, Spring 2017 \cite{prevSemesters}}
\date{February 3rd, 2017}
\author{Stephen McDowell}
\institute{Cornell University}

\begin{document}
\maketitle

% TOC
\begin{frame}{Table of contents}
  \setbeamertemplate{section in toc}[sections numbered]
  \tableofcontents[hideallsubsections]
\end{frame}

\begin{frame}{Some Logistics}
  \begin{leftemize}[<+- | alert@+>]
    \item OH have changed, refer to the \href{https://cs2043-sp17.github.io/syllabus.html}{syllabus page}
    \item WHY IS MY VM RUNNING SO SLOW?!
    \begin{leftemize}
      \item If you started following step 5 on \href{https://cs2043-sp17.github.io/getting_started.html}{Getting Started}...
      \item ...you have to do \textbf{BOTH} steps!
      \item Reminder: tailor the \href{https://cs2043-sp17.github.io/configurations.html}{configurations} to be your own.
    \end{leftemize}
    \item Assignments and release dates.
  \end{leftemize}
\end{frame}

%
%%
%%%
%%%%
%%%%% section recap_on_permissions
%%%%%
%%%%%
%%%%%
%%%%%
\section{Recap on Permissions}
\label{sec:recap_on_permissions}

\begin{frame}[fragile]{The Octal Version of \texttt{chmod}}
  \begin{leftemize}[<+- | alert@+>]
  \item Previously, I linked you to~\cite{chmod} for a good explanation.
  \item For the formula hungry, you can represent \texttt{r}, \texttt{w}, and \texttt{x} as binary variables
        (where 0 is off, and 1 is on).  Then the formula for the modes is

  \[
    r\cdot2^2 + w\cdot2^1 + x\cdot2^0
  \]

  \begin{block}{Examples}
    \begin{itemize}
      \item[] \texttt{chmod 755}: \texttt{rwxr-xr-x}
      \item[] \texttt{chmod 777}: \texttt{rwxrwxrwx}
      \item[] \texttt{chmod 600}: \texttt{rw-------}
    \end{itemize}
  \end{block}

  \item If that makes less sense to you, feel free to ignore it.
  \end{leftemize}
\end{frame}

\begin{frame}[fragile]{Super Confused...}
  \begin{leftemize}[<+- | alert@+>]
    \item Elevate your workflow:

    \begin{block}{\colbf{S}uper\colbf{u}ser \colbf{Do}}
      \texttt{sudo <command>}
      \begin{enumerate}[\--]
        \item Execute \texttt{<command>} as the super user.
        \item The regular user (e.g. \texttt{student}) is executing the \texttt{sudo} command, \emph{not} the
              \texttt{root}.
        \item You enter \emph{your} user password.
        \item You can only execute \texttt{sudo} if you are an "administrator"\tsup{*}.
      \end{enumerate}
    \end{block}

    \item On the course VMs the \texttt{student} user originally had the password \texttt{student}, so that is what
          you would type if you were executing \texttt{sudo}.
    \item On your personal Mac (or native Linux install), you would be typing whatever your password is to login
          to the computer.
  \end{leftemize}
\end{frame}

\begin{frame}[fragile]{Super Confused...}
  \begin{leftemize}[<+- | alert@+>]
    \item If you know the \texttt{root} password, then you can become \texttt{root} using \texttt{su} directly.

    \begin{block}{\colbf{S}witch \colbf{U}ser}
      \texttt{su <user\_name>}
      \begin{enumerate}[\--]
        \item Switches to user \texttt{user\_name}.
        \item The password you enter is the password for \texttt{user\_name}.
        \item If no username is specified, \texttt{root} is implied.
      \end{enumerate}
    \end{block}

    \item The commands \texttt{sudo su root} and \texttt{sudo su} are equivalent:
    \begin{leftemize}
      \item Since you typed \texttt{sudo} first, that is why you type the user password.
    \end{leftemize}
    \item If you just execute \texttt{su} directly, then you have to type the \texttt{root} password.
  \end{leftemize}
\end{frame}

\begin{frame}[fragile]{Default Permissions}
  \begin{leftemize}[<+- | alert@+>]
    \item When you create files during a particular session, the mode you are running in determines what the
          permissions will be.

    \begin{block}{\colbf{U}ser \colbf{mask}}
      \texttt{umask <mode>}
      \begin{enumerate}[\--]
        \item Remove \texttt{mode} from the file's permissions.
        \item Similar syntax to \texttt{chmod}:
        \begin{enumerate}[\--]
          \item \texttt{umask 077}: full access to the user, no access to anybody else.
          \item \texttt{umask g+w}: enables group write permissions.
        \end{enumerate}
        \item \texttt{umask -S}: display the current mask.
      \end{enumerate}
    \end{block}
    \vspace*{-1ex}
    \item Changing the \texttt{umask} only applies for the remainder of the session (e.g. until you close the
          terminal window you were writing this in).
    \item If this has meaning, it is just a bit mask with \texttt{0o777}.
  \end{leftemize}
\end{frame}
%%%%%
%%%%%
%%%%%
%%%%%
%%%%% section recap_on_permissions
%%%%
%%%
%%
%

%
%%
%%%
%%%%
%%%%% section file_compression
%%%%%
%%%%%
%%%%%
%%%%%
\section{File Compression}
\label{sec:file_compression}

\begin{frame}[fragile]{Making Archives: Zip}
  \begin{block}{\colbf{Zip}}
    \texttt{zip <name\_of\_archive> <files\_to\_include>}
    \begin{enumerate}[\--]
      \item Note I said \emph{files}.
      \begin{enumerate}[\--]
        \item E.g. \texttt{zip files.zip a.txt b.txt c.txt}
        \item These will extract to \texttt{a.txt}, \texttt{b.txt}, and \texttt{c.txt} in the current directory.
      \end{enumerate}
        \item To do folders, you need recursion.
      \begin{enumerate}[\--]
        \item \texttt{zip -r folder.zip my\_files/}
        \item This will extract to a folder named \texttt{my\_files}, with whatever was inside of it in tact.
      \end{enumerate}
    \end{enumerate}
  \end{block}
  \begin{block}{\colbf{Unzip}}
    \texttt{unzip <archive\_name>}
  \end{block}
  \colbf{Note:} The original files DO stay in tact.
\end{frame}

\begin{frame}{Making Archives: Gzip}
  \begin{block}{\colbf{Gzip}}
    \texttt{gzip <files\_to\_compress>}
    \begin{enumerate}[\--]
      \item Less time to compress, larger file: \texttt{--fast}
      \item More time to compress, smaller file: \texttt{--best}
      \item Read the \texttt{man} page, lots of options.
    \end{enumerate}
  \end{block}
  \begin{block}{\colbf{Gunzip}}
    \texttt{gunzip <archive\_name>}
  \end{block}
  \colbf{Notes:}
  \begin{leftemize}[<+- | alert@+>]
    \item By default, \emph{replaces} the original files!
    \begin{leftemize}
      \item You can use \texttt{--keep} to bypass this.
    \end{leftemize}
    \item Does not bundle the files.
    \item Usually has better compression than \texttt{zip}.
  \end{leftemize}
\end{frame}

\begin{frame}[fragile]{Making Archives: Tar}
  \begin{leftemize}[<+- | alert@+>]
    \item Bundling files together to compress is easy!
    \begin{block}{\colbf{T}ape \colbf{Ar}chive}
      \begin{enumerate}[\--]
        \item[]\hspace*{-2ex}\texttt{tar -cf <tar\_archive\_name> <files\_to\_compress>}
        \item \colbf{C}reate a tar archive.

        \item[]\hspace*{-2ex}\texttt{tar -xf <tar\_archive\_name>}
        \item E\colbf{x}tract all files from archive.
      \end{enumerate}
    \end{block}
    \item\colbf{Notes:}
    \item \texttt{tar} is just a bundling suite, creating a single file.
    \item By default, it does \emph{not} compress.
    \item Original files DO stay in tact.
    \item Unlike \texttt{zip}, you do not need the \texttt{-r} flag for folders :)
  \end{leftemize}
\end{frame}

\begin{frame}[fragile]{Making Archives: Tarballs}
  \begin{leftemize}[<+- | alert@+>]
    \item Combine \texttt{tar} and a compression utility to make a \emph{tarball}.

    \begin{block}{Making tarballs}
      \texttt{tar -c(z/j)f <archive\_name> <source\_files>}\\
      \texttt{tar -x(z/j)f <archive\_name>}
      \begin{enumerate}[\--]
        \item \texttt{(z/j)} here means \emph{either} \texttt{z} \emph{or} \texttt{j}, \colbf{not} both.
        \item The \texttt{-z} flag specifies \texttt{gzip} as the compression method.
        \item YOU have to specify the file extension.
        \begin{enumerate}[\--]
          \item Extension convention: \texttt{.tar.gz}
          \item Example: \texttt{tar -cjf files.tar.gz files/}
        \end{enumerate}
        \item The \texttt{-j} flag specifies \texttt{bzip2} as the compression method.
        \begin{enumerate}[\--]
          \item Extension convention: \texttt{.tar.bz2}
          \item Example: \texttt{tar -cjf files.tar.bz2 files/}
        \end{enumerate}
      \end{enumerate}
    \end{block}
  \end{leftemize}
\end{frame}

\begin{frame}[fragile]{Pro Tip: Minimize your Keystrokes}
  \begin{leftemize}[<+- | alert@+>]
    \item Extraction can \emph{usually} happen automatically:
    \begin{leftemize}
      \item \texttt{tar -xf files.tar.gz} will usually work (no \texttt{-z})
    \end{leftemize}
    \item It's the flag equivalent of the \texttt{tab} key.
    \begin{leftemize}
      \item Ok, maybe not...but just remember it!
      \item This serves as a not-so-subtle reminder to obsessively hit your \texttt{tab} key ;)
    \end{leftemize}
  \end{leftemize}
\end{frame}
%%%%%
%%%%%
%%%%%
%%%%%
%%%%% section file_compression
%%%%
%%%
%%
%

%
%%
%%%
%%%%
%%%%% section assorted_commands
%%%%%
%%%%%
%%%%%
%%%%%
\section{Assorted Commands}
\label{sec:assorted_commands}

\begin{frame}[fragile]{Before we can Chain...}
  ...we need some more interesting tools to chain together!
\end{frame}

\begin{frame}[fragile]{Counting}
  \begin{leftemize}[<+- | alert@+>]
    \item Ever wanted to show off how cool you are?

    \begin{block}{\colbf{W}ord \colbf{C}ount}
      \texttt{wc [options] <file>}
      \begin{enumerate}[\--]
        \item[] \texttt{-l}: count the number of lines.
        \item[] \texttt{-w}: count the number of words.
        \item[] \texttt{-m}: count the number of characters.
        \item[] \texttt{-c}: count the number of bytes.
      \end{enumerate}
    \end{block}

    \item Great for things like:

    \begin{leftemize}
      \item Reveling in the number of lines you have programmed.
      \item Analyzing the verbosity of your personal statement.
      \item Showing people how cool you are.
      \item Completing homework assignments?
    \end{leftemize}
  \end{leftemize}
\end{frame}

\begin{frame}[fragile]{Sorting}
  \begin{leftemize}[<+- | alert@+>]
    \item You don't even need to use your brain to sort things anymore!

    \begin{block}{\colbf{Sort}}
      \texttt{sort [options] <file>}
      \begin{enumerate}[\--]
        \item Default: sort by the \texttt{ASCII} code (roughly alphabetical) for the whole line.
        \item Use \texttt{-r} to reverse the order.
        \item Use \texttt{-n} to sort by numerical order.
        \item Use \texttt{-u} to remove duplicates.
      \end{enumerate}
    \end{block}
    \vspace*{-4ex}
    \pause
    \begin{minipage}[t]{\textwidth}
      \begin{minipage}[t]{.3\textwidth}
        \begin{minted}[bgcolor=bg, gobble=8, fontsize=\fontsize{7.05}{0}]{bash}
          $ cat peeps.txt
          Manson, Charles
          Bundy, Ted
          Bundy, Jed
          Nevs, Sven
          Nevs, Sven
        \end{minted}
      \end{minipage}
      \hfill
      \begin{minipage}[t]{.3\textwidth}
        \begin{minted}[bgcolor=bg, gobble=8, fontsize=\fontsize{7.05}{0}]{bash}
          $ sort -r peeps.txt
          Nevs, Sven
          Nevs, Sven
          Manson, Charles
          Bundy, Ted
          Bundy, Jed
        \end{minted}
      \end{minipage}
      \hfill
      \begin{minipage}[t]{.3\textwidth}
        \begin{minted}[bgcolor=bg, gobble=8, fontsize=\fontsize{7.05}{0}]{bash}
          $ sort -ru peeps.txt
          Nevs, Sven
          Manson, Charles
          Bundy, Ted
          Bundy, Jed
          # only 1 Nevs, Sven
        \end{minted}
      \end{minipage}
    \end{minipage}
  \end{leftemize}
\end{frame}

\begin{frame}[fragile]{Advanced Sorting}
  \begin{leftemize}[<+- | alert@+>]
    \item The \texttt{sort} command is quite powerful, for example you can do:

      \begin{minted}[bgcolor=bg, gobble=8]{bash}
        $ sort -n -k 2 -t "," <filename>
      \end{minted}

    \item Sorts the file numerically by using the second column, separating by a comma as the delimiter instead
            of a space.
    \item Read the \texttt{man} page!
  \vspace*{-2ex}
  \begin{minipage}[t]{\textwidth}
    \begin{minipage}[t]{.48\textwidth}
      \begin{minted}[bgcolor=bg, gobble=8, fontsize=\fontsize{7.05}{0}]{bash}
        $ cat numbers.txt
        02,there
        04,how
        01,hi
        06,you
        03,bob
        05,are
      \end{minted}
    \end{minipage}
    \hfill
    \begin{minipage}[t]{.48\textwidth}
      \begin{minted}[bgcolor=bg, gobble=8, fontsize=\fontsize{7.05}{0}]{bash}
        $ sort -n -k 2 -t "," numbers.txt
        01,hi
        02,there
        03,bob
        04,how
        05,are
        06,you
      \end{minted}
    \end{minipage}
  \end{minipage}
  \end{leftemize}
\end{frame}

\begin{frame}[fragile]{Special Snowflakes}
  \begin{block}{\colbf{Uniq}ue}
    \texttt{uniq [options] <file>}
    \begin{enumerate}[\--]
      \item No flags: discards all but one of successive identical lines.
      \item Use \texttt{-c} to prints the number of successive identical lines next to each line.
    \end{enumerate}
  \end{block}
\end{frame}

\begin{frame}[fragile]{Search and Replace}
  \begin{leftemize}[<+- | alert@+>]
    \item Translate characters and sets (but not regular expressions) easily!

    \begin{block}{\colbf{Tr}anslate}
      \texttt{tr [options] <set1> [set2]}
      \begin{enumerate}[\--]
        \item Translate or delete characters.
        \item Sets are strings of characters.
        \item By default, searches for strings matching \texttt{set1} and replaces them with \texttt{set2}.
        \item You can use POSIX and custom-defined \emph{sets} (we'll get there soon!).
      \end{enumerate}
    \end{block}

    \item The \texttt{tr} command only works with streams.
    \item Examples to come after we learn about chaining commands in the next section.
  \end{leftemize}
\end{frame}
%%%%%
%%%%%
%%%%%
%%%%%
%%%%% section assorted_commands
%%%%
%%%
%%
%

%
%%
%%%
%%%%
%%%%% section chaining_commands
%%%%%
%%%%%
%%%%%
%%%%%
\section{Chaining Commands}
\label{sec:chaining_commands}

\begin{frame}[fragile]{Your Environment and Variables}
  \begin{leftemize}[<+- | alert@+>]
    \item There are various environment variables defined in your environment.  They are almost always all
          capital letters.
    \item You obtain their value by dereferencing them with a \texttt{\$}.

    \begin{minted}[bgcolor=bg, gobble=6, fontsize=\footnotesize]{bash}
      $ echo $PWD    # present working directory
      $ echo $OLDPWD # print previous working directory
      $ printenv     # print all environment variables
    \end{minted}

    \item When you execute commands, they have something called an "exit code".
    \item The exit code of the last command executed is stored in the \texttt{\$?} environment variable.
  \end{leftemize}
\end{frame}

\begin{frame}[fragile]{What is Defined?}
  \begin{leftemize}[<+- | alert@+>]
      \item The environment:
      \begin{leftemize}
        \item \texttt{env}: displays all environment variables.
        \item \texttt{unsetenv <name>}: remove an environment variable.
      \end{leftemize}
      \item The local variables:
      \begin{leftemize}
        \item \texttt{set}: displays all shell / local variables.
        \item \texttt{unset <name>}: remove a shell variable.
      \end{leftemize}
      \item We'll cover these a little more when we talk about customizing your terminal shell.
  \end{leftemize}
\end{frame}

\begin{frame}[fragile]{Exit Codes}
  \begin{leftemize}[<+- | alert@+>]
    \item There are various exit codes, here are a few examples:

    \begin{minted}[bgcolor=bg, gobble=6, fontsize=\footnotesize]{bash}
      $ super_awesome_command
      bash: super_awesome_command: command not found...
      $ echo $?
      127
      $ echo "What is the exit code we want?"
      $ echo $?
      0
    \end{minted}
    \begin{leftemize}
      \item The success code we want is actually \texttt{0}.  Refer to \cite{exit} for some more examples.
      \item Remember that \texttt{cat /dev/urandom} trickery?  You will have to \texttt{ctrl+c} to kill it, what
            would the exit code be?
    \end{leftemize}
  \end{leftemize}
\end{frame}

\begin{frame}[fragile]{Executing Multiple Commands in a Row}
  \begin{leftemize}[<+- | alert@+>]
    \item With exit codes, we can define some simple rules to chain commands together:
    \begin{leftemize}
      \item Always execute:

      \begin{minted}[bgcolor=bg, gobble=6, fontsize=\footnotesize]{bash}
        $ cmd1; cmd2   # exec cmd1 first, then cmd2
      \end{minted}

      \item Execute conditioned upon exit code:

      \begin{minted}[bgcolor=bg, gobble=6, fontsize=\footnotesize]{bash}
        $ cmd1 && cmd2 # exec cmd2 only if cmd1 returned 0
        $ cmd1 || cmd2 # exec cmd2 only if cmd1 returned NOT 0
      \end{minted}

      \item Kind of backwards, in terms of what means continue for \emph{and}, but that was likely easier to implement
            since there is only one \texttt{0} and many \colbf{not} \texttt{0}'s.
    \end{leftemize}
  \end{leftemize}
\end{frame}

\begin{frame}[fragile]{Piping Commands}
  \begin{leftemize}[<+- | alert@+>]
    \item Bash scripting is all about combining simple commands together to do more powerful things.  This is accomplished
      using the "pipe" character.

    \begin{block}{Piping}
      \texttt{<command1> | <command2>}
      \begin{enumerate}[\--]
        \item Passes the output from \texttt{command1} to be the input of \texttt{command2}.
        \item Works for \emph{heaps} of programs that take input and provide output to the terminal.
      \end{enumerate}
    \end{block}
  \end{leftemize}
\end{frame}

\begin{frame}[fragile]{Some Piping Examples}
  \begin{block}{Piping along...}
    \texttt{\$ ls -al /bin | less}
    \begin{enumerate}[\--]
      \item Allows you to scroll through the long list of programs in \texttt{/bin}
    \end{enumerate}
    \texttt{\$ history | tail -20 | head -10}
    \begin{enumerate}[\--]
      \item Displays the 10\tsup{th} \-- 19\tsup{th} previous commands from the previous session.
    \end{enumerate}
    \texttt{\$ echo * | tr ' ' '\textbackslash n'}
    \begin{enumerate}[\--]
      \item Replaces all spaces characters with new lines.
      \item Execute just \texttt{echo *} to see the difference.
    \end{enumerate}
  \end{block}
\end{frame}

\begin{frame}[fragile]{Redirection}
  \begin{leftemize}[<+- | alert@+>]
    \item To redirect input / output streams, you can use one of \texttt{>}, \texttt{>>}, \texttt{<}, or \texttt{<<}.
    \begin{leftemize}
      \item To redirect standard output, use the \texttt{>} operator.
      \begin{leftemize}
        \item \texttt{command > file}
      \end{leftemize}
      \item To redirect standard input, use the \texttt{<} operator.
      \begin{leftemize}
        \item \texttt{command < file}
      \end{leftemize}
      \item To redirect standard error, use the \texttt{>} operator and specify the stream number \texttt{2}.
      \begin{leftemize}
        \item \texttt{command 2> file}
      \end{leftemize}
      \item Combine streams together by using \texttt{2>\&1} syntax.
      \begin{leftemize}
        \item This says: send standard error to where standard output is going.
        \item Useful for debugging / catching error messages...
        \item ...or ignoring them (you will often see that sent to \texttt{/dev/null}).
      \end{leftemize}
    \end{leftemize}
  \end{leftemize}
\end{frame}

\begin{frame}[fragile]{Redirection Example}
  \begin{leftemize}[<+- | alert@+>]
    \item Bash processes I/O redirection from left to right, allowing us to do fun things like this:

    \begin{block}{Magic}
      \texttt{tr -cd '0-9' < test1.txt > test2.txt}
      \begin{enumerate}[\--]
        \item Deletes everything but the numbers from \texttt{test1.txt}, then store them in \texttt{test2.txt}.
        \item CAUTION: do not \emph{ever} use the same file as output that was input.
        \begin{enumerate}[\--]
          \item Example: \texttt{tr -cd '0-9' < original.txt > original.txt}
          \item You will \emph{lose} all your data, you cannot read and write this way.
        \end{enumerate}
      \end{enumerate}
    \end{block}

    \item Piping and Redirection are quite sophisticated, please refer to the Wikipedia page in \cite{wiki}.
  \end{leftemize}
\end{frame}
%%%%%
%%%%%
%%%%%
%%%%%
%%%%% section chaining_commands
%%%%
%%%
%%
%

\begin{frame}[allowframebreaks]{References}
  \bibliography{references}
  \bibliographystyle{abbrv}
\end{frame}

\end{document}
